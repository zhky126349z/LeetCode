Description:
Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins.

Given an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score.

Example 1:
Input: [1, 5, 2]
Output: False
Explanation: Initially, player 1 can choose between 1 and 2. 
If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). 
So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. 
Hence, player 1 will never be the winner and you need to return False.
Example 2:
Input: [1, 5, 233, 7]
Output: True
Explanation: Player 1 first chooses 1. Then player 2 have to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.
Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.
Note:
1 <= length of the array <= 20.
Any scores in the given array are non-negative integers and will not exceed 10,000,000.
If the scores of both players are equal, then player 1 is still the winner.

Solution:
我自己的思路是一开始可以以状态去搜索，但是发现搜索开销过大，分析了一下发现是因为计算了很多重复状态。
因此开了一个数组来进行记忆化搜索，就把各种状态计算下来的值都记录下来。发现可行。
但是可以记忆化搜索是动态规划的一种实现，所以肯定有动态规划的方法。
DP方法：https://leetcode.com/problems/predict-the-winner/discuss/96828/JAVA-9-lines-DP-solution-easy-to-understand-with-improvement-to-O(N)-space-complexity.
主要是dp[i][j]记录先手选手比后手选手能获得的更多的分数
dp[i][j] = Math.max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);

Code:
class Solution {
public:
    
    int rec[20][20][2][2];
    
    bool PredictTheWinner(vector<int>& nums) {
        vector<int> play;
        memset(rec, 0 ,sizeof(rec));
        play = search(nums, 0, nums.size() - 1, 0);
        return play[0] >= play[1];
    }
    
    vector<int> search(vector<int> nums, int begin, int end, int who) {
        vector<int> play(2, 0);
        if (begin > end) return play;
        
        if (rec[begin][end][who][0] != 0 || rec[begin][end][who][1] != 0) {
            play[who] = rec[begin][end][who][who];
            play[1 - who] = rec[begin][end][who][1 - who];
            return play;
        }
        
        vector<int> situ1 = search(nums, begin + 1, end, 1 - who);
        vector<int> situ2 = search(nums, begin ,end - 1, 1 - who);
        if (nums[begin] + situ1[who] > nums[end] + situ2[who]) {
            play[who] = nums[begin] + situ1[who];
            play[1 - who] = situ1[1 - who];
        } else {
            play[who] = nums[end] + situ2[who];
            play[1 - who] = situ2[1 - who];
        }
        rec[begin][end][who][who] = play[who];
        rec[begin][end][who][1 - who] = play[1 - who];
        return play;
    }
};
