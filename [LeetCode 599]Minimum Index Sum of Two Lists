Description:
Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.

Example 1:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
Output: ["Shogun"]
Explanation: The only restaurant they both like is "Shogun".
Example 2:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["KFC", "Shogun", "Burger King"]
Output: ["Shogun"]
Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).

Solution:
hashmap水题

Code:
class Solution {
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        vector<string> resVec;
        int res = INT_MAX;
        unordered_map<string, int> indexSum;
        for (int i = 0; i < list1.size(); i ++) {
            indexSum.insert(make_pair(list1[i], -(i + 1)));
        }
        for (int i = 0; i < list2.size(); i ++) {
            if (indexSum.find(list2[i]) != indexSum.end()) {
                indexSum[list2[i]] = -indexSum[list2[i]] - 1 + i;
            }
        }

        for (auto sum : indexSum) {
            if (sum.second >= 0 && sum.second < res) {
                res = sum.second;
            }
        }

        for (auto sum : indexSum) {
            if (sum.second == res) {
                resVec.push_back(sum.first);
            }
        }
        return resVec;
    }
};
