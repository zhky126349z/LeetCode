Description:
We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.

Every time you guess wrong, I'll tell you whether the number I picked is higher or lower.

However, when you guess a particular number x, and you guess wrong, you pay $x. You win the game when you guess the number I picked.

Example:

n = 10, I pick 8.

First round:  You guess 5, I tell you that it's higher. You pay $5.
Second round: You guess 7, I tell you that it's higher. You pay $7.
Third round:  You guess 9, I tell you that it's lower. You pay $9.

Game over. 8 is the number I picked.

You end up paying $5 + $7 + $9 = $21.
Given a particular n ≥ 1, find out how much money you need to have to guarantee a win.

Solution:
用dp做，目的是为了最小化最大损失，见https://en.wikipedia.org/wiki/Minimax
dp[i][j]表示保证在i-j中选数字获胜的最小代价。
dp[i][i] = 0 因为只有一个数，所以不用选。
我们的目标是想求dp[1][n]。
比如求dp[i][j]，我们首先在[i,j]中选择一个数字k，那么原问题就划分为了从左右两半区液就是[i,k-1]和[k+1,j]中选择较大的损失，即选择k后的最大损失是k + max(dp[i][k-1], dp[k+1][j])因为选择了k所以要付出k和剩下的代价。
那么为了最小化最大损失，我们需要选出一个最好的k，即dp[i][j] = min(dp[i][j], k + max(dp[i][k-1], dp[k+1][j]))(i<=k<=j)
代码最外部循环是长度，我们从最短的长度一步一步循环上去。
len = 1
dp[1][2] = min(1, 2) = 1 (1<=k<=2)
dp[2][3] = min(2, 3) = 2 (2<=k<=3)
len = 2
dp[1][3] = min(1 + max(dp[1][0], dp[2][3]),
                2 + max(dp[1][1], dp[3][3]),
                3 + max(dp[1][2], dp[4][3]))  (1<=k<=3)
         = min(3, 2, 4) = 2
大概如此

Code:
class Solution {
public:
    int getMoneyAmount(int n) {
        if (n == 1) return 0;
        int dp[n + 1][n + 1];
        
        for (int len = 1; len < n; len ++) {
            for (int i = 1; i + len <= n; i ++) {
                int j = i + len;
                dp[i][j] = INT_MAX;
                for (int k = i; k <= j; k ++) {
                    dp[i][j] = min(max((k - 1 > i ? dp[i][k-1] : 0), (k + 1 < j ? dp[k + 1][j] : 0)) + k, dp[i][j]);
                }
            }
        }
        return dp[1][n];
    }
};
