Description:
Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.
Example 1:
Input:s1 = "ab" s2 = "eidbaooo"
Output:True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:
Input:s1= "ab" s2 = "eidboaoo"
Output: False
Note:
The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

Solution:
用数组记录模式串所有出现字符及数量，记录总共出现的字符数，滑动窗口，看窗口内是否满足。我这里写复杂了，用了二进制位来判断。

Code:
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        if (s1.length() > s2.length()) return false;
        vector<int> pattern(26, 0);
        vector<int> orginal(26, 0);
        int flag = 0;
        int patternFlag = 0;
        for (auto ch : s1) {
            pattern[ch - 'a'] ++;
            patternFlag |= (1 << (ch - 'a'));
        }
        for (int i = 0; i < s1.length(); i ++) {
            if (pattern[s2[i] - 'a'] == 0) continue;
            if (++orginal[s2[i] - 'a'] == pattern[s2[i] - 'a']) {
                flag |= (1 << (s2[i] - 'a'));
            } else {
                flag &= ~(1 << (s2[i] - 'a'));
            }
        }
        if (!(flag ^ patternFlag)) return true;
        for (int i = s1.length(); i < s2.length(); i ++) {
            if (pattern[s2[i] - 'a'] != 0) {
                if (++orginal[s2[i] - 'a'] == pattern[s2[i] - 'a']) {
                    flag |= (1 << (s2[i] - 'a'));
                } else {
                    flag &= ~(1 << (s2[i] - 'a'));
                }
            }

            if (pattern[s2[i - s1.length()] - 'a'] != 0) {
                if (--orginal[s2[i - s1.length()] - 'a'] == pattern[s2[i - s1.length()] - 'a']) {
                    flag |= (1 << (s2[i - s1.length()] - 'a'));
                } else {
                    flag &= ~(1 << (s2[i - s1.length()] - 'a'));
                }
            }

        if (!(flag ^ patternFlag)) return true;
        }

        return false;
    }
};
