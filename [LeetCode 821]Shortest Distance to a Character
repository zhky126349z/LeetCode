Description:
Given a string S and a character C, return an array of integers representing the shortest distance from the character C in the string.

Example 1:

Input: S = "loveleetcode", C = 'e'
Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]
 

Note:

S string length is in [1, 10000].
C is a single character, and guaranteed to be in string S.
All letters in S and C are lowercase.

Solution:
我的想法是先找出所有的字符C，然后以step步长向左右两边扩展，一开始觉得应该是O(n)，但是后来发现有的元素不止被check了一次，被check了好几次。
另外一种方法是从左往右scan一次，然后从右往左scan一次，严格保证时间复杂度是O(n)

Code:
class Solution {
public:
    vector<int> shortestToChar(string S, char C) {
        vector<int> target;
        vector<int> res(S.length(), -1);
        for (int i = 0; i < S.length(); i ++) {
            if (S[i] == C) {
                target.push_back(i);
                res[i] = 0;
            }
        }
        int step = 1;
        bool change = true;
        while(change) {
            change = false;
            for (int i = 0; i < target.size(); i ++) {
                if (target[i] - step >= 0 && res[target[i] - step] == -1) {
                    res[target[i] - step] = step;
                    change = true;
                }
                if (target[i] + step < S.length() && res[target[i] + step] == -1) {
                    res[target[i] + step] = step;
                    change = true;
                }
            }
            step ++;
        }
        return res;
    }
};
