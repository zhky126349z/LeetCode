Description:
Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Example 1:

Input: [1,3,null,null,2]

   1
  /
 3
  \
   2

Output: [3,1,null,null,2]

   3
  /
 1
  \
   2
Example 2:

Input: [3,1,4,null,null,2]

  3
 / \
1   4
   /
  2

Output: [2,1,4,null,null,3]

  2
 / \
1   4
   /
  3
  
Solution:
中序遍历在BST中的非常好用因为BST的中序遍历就是从小到大遍历，
那么如果有两个元素被swap了的话，等价于有一个较大的元素被放到了较小的树结构中，而一个较小的元素被放到了较大的树结构中，
当我们对该BST进行中序遍历的时候，肯定会先访问到较大的元素，
三个变量，preNode，first，secod和curNode
我们只需要将元素和他前面一个前驱元素preNode相比，当preNode>=curNode时，这个preNode就是放错的较大的元素，记为first，
注意此时直接curNode也满足是较小的元素的条件，有可能是second元素，所以先将其记为second，
继续往后扫描，当再次出现preNode>=curNode时，curNode就是second，
要求空间复杂度为O(1)，需要使用Morris遍历，大体思路是，
1.如果cur没有左孩子，输出cur，cur=cur->right
2.如果cur有左孩子，找到cur的前驱结点preNode，即左子树最右结点
  a. 如果preNode->right == NULL，preNode->right = cur连接，cur=cur->left
  b. 如果preNode->right == cur, preNode->right = NULL断开连接，输出cur，cur=cur->right
  
Code:
class Solution {
public:
    void recoverTree(TreeNode* root) {
        TreeNode* preNode = NULL;
        TreeNode* firstEle = NULL;
        TreeNode* secondEle = NULL;
        TreeNode* cur = root;
        if (root == NULL) return;

        while(cur != NULL) {
            if (preNode != NULL && preNode->val >= cur->val) {
                if (firstEle == NULL) {
                    firstEle = preNode;
                }
                secondEle = cur;
            }

            if (cur->left == NULL) {
                preNode = cur;
                cur = cur->right;
            } else {
                TreeNode* temp = cur->left;
                while(temp->right && temp->right != cur) {
                    temp = temp->right;
                }
                
                if (temp->right == NULL) {
                    temp->right = cur;
                    cur = cur->left;
                } else {
                    temp->right = NULL;
                    preNode = cur;
                    cur = cur->right;
                }

            }
        }

        int t = firstEle->val;
        firstEle->val = secondEle->val;
        secondEle->val = t;
        return;
    }
};

// class Solution {
// private:
//     TreeNode* preNode = NULL;
//     TreeNode* firstEle = NULL;
//     TreeNode* secondEle = NULL;
    
//     void inOrderTraversal(TreeNode* root) {
//         if (root == NULL) return;
//         inOrderTraversal(root->left);
//         if (preNode != NULL &&  preNode->val >= root->val) {
//             if (firstEle == NULL) {
//                 firstEle = preNode;
//             } 
//             secondEle = root;
//         }
//         preNode = root;
//         inOrderTraversal(root->right);
//         return;
//     }

// public:
//     void recoverTree(TreeNode* root) {
//         inOrderTraversal(root);
//         int temp;
//         temp = firstEle->val;
//         firstEle->val = secondEle->val;
//         secondEle->val = temp;
//         return;
//     }
// };
