Description:
A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:
Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".
Example 2:
Input: "1*"
Output: 9 + 9 = 18
Note:
The length of the input string will fit in range [1, 105].
The input string will only contain the character '*' and digits '0' - '9'.

Solution:
dp[i] = dp[i - 1] * ? + dp[i - 2] * ?，然后根据情况进行分析即可，
因为每次新考虑一个字符，该字符要么被认为是单个，要么与前一个字符进行结合，
被认为是单个的时候只与dp[i - 1]的方法数有关，被认为是与前一个进行结合时，与dp[i - 2]的方法数有关。
然后分情况进行讨论，主要是特么如果新加入的字符是0，不能被单个进行考虑！！！！！坑在这上面了
而且*只能被表示1-9

Code:
class Solution {
public:
    int numDecodings(string s) {
        long dp[s.length()];
        memset(dp, 0, sizeof(dp));
        // different * 
        for (int i = 0; i < s.length(); i ++) {
            if (s[i] != '0') {
                dp[i] += (i > 0 ? dp[i - 1] : 1) * (s[i] == '*' ? 9 : 1);
            }
            if (i < 1) continue;
            
            // two chars are not '*'
            if (s[i - 1] != '*' && s[i] != '*') {
                if (s[i - 1] == '1' || 
                   (s[i - 1] == '2' && s[i] <= '6')) {
                    dp[i] += (i > 1 ? dp[i - 2] : 1 ) * 1;
                }
            }
            
            // first char is '*'
            if (s[i - 1] == '*' && s[i] != '*') {
                if (s[i] <= '6') {
                    dp[i] += (i > 1 ? dp[i - 2] : 1) * 2;
                } else {
                    dp[i] += (i > 1 ? dp[i - 2] : 1) * 1;
                }
            }
            
            // second char is '*'
            if (s[i - 1] != '*' && s[i] == '*') {
                if (s[i - 1] == '1') {
                    dp[i] += (i > 1 ? dp[i - 2] : 1) * 9;
                } else if (s[i - 1] == '2') {
                    dp[i] += (i > 1 ? dp[i - 2] : 1) * 6;
                }
            }
            
            // two chars are '*'
            if (s[i - 1] == '*' && s[i] == '*') {
                dp[i] += (i > 1 ? dp[i - 2] : 1) * 15;
            }
            
            dp[i] = dp[i] % 1000000007;
        }
        return (int)dp[s.length() - 1];
    }
};
