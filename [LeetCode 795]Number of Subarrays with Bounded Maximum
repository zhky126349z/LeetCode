Description:
We are given an array A of positive integers, and two positive integers L and R (L <= R).

Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least L and at most R.

Example :
Input: 
A = [2, 1, 4, 3]
L = 2
R = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
Note:

L, R  and A[i] will be an integer in the range [0, 10^9].
The length of A will be in the range of [1, 50000].

Solution:
我的做法是对于某一个数找他左边和右边的刚好比他大的数，然后如果该数字满足条件，则直接在这个范围内计算个数，最后复杂度也是O(n)的。
至于找左右刚好比他大的数，用stack。
发现做法可以被简化，用dp做，当前数字分三种情况处理，
再简化则可以把情况合并处理，基本就是确定left和right，left更新条件是遇到大于R的，right更新条件是遇到比L大的，如果小于L的话不在乎，
然后每次都计算一次以R结尾的subarray数量，就是right-left

Code:
class Solution {
public:
    int numSubarrayBoundedMax(vector<int>& A, int L, int R) {
        int result=0, left=-1, right=-1;
        for (int i=0; i<A.size(); i++) {
            if (A[i]>R) left=i;
            if (A[i]>=L) right=i;
            result+=right-left;
        }
        return result;
    }
};

class Solution {
public:
    int numSubarrayBoundedMax(vector<int>& A, int L, int R) {
        if (A.size() == 0) return 0;
        int prev = -1, res = 0;
        vector<int> dp(A.size(), 0);
        for (int i = 0; i < A.size(); i ++) {
            if (A[i] < L) {
                dp[i] = i - 1 >= 0 ? dp[i - 1] : 0;
                res += dp[i];
            } else if (A[i] > R) {
                dp[i] = 0;
                prev = i;
            } else {
                dp[i] = i - prev;
                res += dp[i];
            }
        }
        return res;
    }
};


// class Solution {
// public:
//     int numSubarrayBoundedMax(vector<int>& A, int L, int R) {
//         if (A.size() == 0) return 0;
//         int index = 0, res = 0;
//         vector<int> post(A.size(), 0);
//         vector<int> pre(A.size(), 0);
//         stack<int> st;
//         for (int i = 0; i < A.size(); i ++) {
//             while(!st.empty() && A[i] > A[st.top()]) {
//                 post[st.top()] = i;
//                 st.pop();
//             }
//             st.push(i);
//         }
//         while(!st.empty()) {
//             post[st.top()] = A.size();
//             st.pop();
//         }
//         for (int i = A.size() - 1; i >= 0; i --) {
//             while(!st.empty() && A[i] >= A[st.top()]) {
//                 pre[st.top()] = i;
//                 st.pop();
//             }
//             st.push(i);
//         }
//         while(!st.empty()) {
//             pre[st.top()] = -1;
//             st.pop();
//         }

//         for (int i = 0; i < A.size(); i ++) {
//             if (A[i] >= L && A[i] <= R) {
//                 res += (i - pre[i] == 0 ? 1 : i - pre[i]) * (post[i] - i == 0 ? 1 : post[i] - i);
//             }
//         }
        
//         return res;
//     }
// };
