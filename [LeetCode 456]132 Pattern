Description:
 Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.

Note: n will be less than 15,000.

Example 1:
Input: [1, 2, 3, 4]

Output: False

Explanation: There is no 132 pattern in the sequence.
Example 2:
Input: [3, 1, 4, 2]

Output: True

Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
Example 3:
Input: [-1, 3, 2, 0]

Output: True

Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].

Solution:
从O(n^3)想到如果先确定所有值左边的最小值，然后在右边找一个比这个最小值大的值即可，降低到O(n^2)。
O(n)思想，从结尾向前，用stack来维护出一个当前位置右边最大的s3候选，满足s3的条件是其左边存在一个s2比他大，当遍历到有数小于这个s3时即找到满足的序列。


Code:
O(n^2)
class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        if (nums.size() == 0) return false;
        int length = nums.size();
        int l_min[length]; 
        memset(l_min, 0, sizeof(l_min));
        
        int min = 0;
        for (int i = 0; i < length; i ++) {
            if (nums[i] <= nums[min]) min = i;
            l_min[i] = min;
        }
        
        for (int i = 1; i < length - 1; i ++) {
            if (l_min[i] < i) {
                for (int j = i + 1; j < length; j ++) {
                    if (nums[j] < nums[i] && nums[j] > nums[l_min[i]]) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
};

O(n)
class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        stack<int> st;
        int s3_can = INT_MIN;
        for (int i = nums.size() - 1; i >= 0; i --) {
            if (nums[i] < s3_can) return true;
            else {
                while(!st.empty() && nums[i] > st.top()) {
                    s3_can = st.top();
                    st.pop();
                }
            }
            st.push(nums[i]);
        }
        return false;
    }
};
