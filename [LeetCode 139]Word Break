Description:
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false

Solution:
普通的dp题，dp[i]表示s(0, i)子串能否用dict里的单词构成，如果可以则为true，
求dp[i]的时候如果dp[j]为true，且s(j, i)在dict里，则表明s(0, i)为true，可以组成，
总的时间复杂度为O(n^2)
其中找剩余字符串是否在dict用了容器的count()
std::count(wordDict.begin(), wordDict.end(), str);

Code:
class Solution {
public:
	bool wordBreak(string s, vector<string>& wordDict) {
		// dp[i] = dp[i - j] && s[j, len] in dic
		// use dictionary tree to judge if s[j, len] in dic
		vector<bool> dp(s.length(), false);

		for (int i = 0; i < s.length(); i++) {
			for (int j = 0; j <= i; j++) {
				string pos = s.substr(j, i - j + 1);
				bool preIn = j == 0 ? true : dp[j - 1];
				bool posIn = std::count(wordDict.begin(), wordDict.end(), pos);
				if (preIn && posIn) {
					dp[i] = true;
					break;
				}
			}
		}
		return dp[s.length() - 1];
	}
};
