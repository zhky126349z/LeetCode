Description:
Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.

A partially filled sudoku which is valid.

The Sudoku board could be partially filled, where empty cells are filled with the character '.'.

Solution:
检查每行每列行格，可以在一个循环里做完

Code:
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        for (int i = 0; i < 9; i ++) {
            string rowCheck = "0000000000";
            string columnCheck = "0000000000";
            for (int j = 0; j < 9; j ++) {
                if (board[i][j] >= '1' && board[i][j] <= '9') {
                    if (rowCheck[board[i][j] - '0'] > '0') return false;
                    rowCheck[board[i][j] - '0'] ++;
                }
                if (board[j][i] >= '1' && board[j][i] <= '9') {
                    if (columnCheck[board[j][i] - '0'] > '0') return false;
                    columnCheck[board[j][i] - '0'] ++;
                }
            }
        }

        for (int i = 0; i < 3; i ++) {
            for (int j = 0; j < 3; j ++) {
                int startRow = i * 3;
                int startColumn = j * 3;
                string check = "0000000000";
                for (int k = startRow; k < startRow + 3; k ++) {
                    for (int l = startColumn; l < startColumn + 3; l ++) {
                        if (board[k][l] >= '1' && board[k][l] <= '9') {
                            if (check[board[k][l] - '0'] > '0') return false;
                            check[board[k][l] - '0'] ++;
                        }
                    }
                }
            }
        }
        return true;
    }
};
