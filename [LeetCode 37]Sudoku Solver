Description:
Write a program to solve a Sudoku puzzle by filling the empty cells.

Empty cells are indicated by the character '.'.

You may assume that there will be only one unique solution.


A sudoku puzzle...


...and its solution numbers marked in red.

Solution:
DFS，把空缺的格子用0~9去试验并检测，不断往后尝试如果检测失败则回退。

Code:
class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }

private:
    bool solve (vector<vector<char>>& board) {
        int row = board.size();
        int col = board[0].size();
        for (int i = 0; i < row; i ++) {
            for (int j = 0; j < col; j ++) {
                if (board[i][j] == '.') {
                    for (int k = '1'; k <= '9'; k ++) {
                        if (check(board, i, j, k)) {
                            board[i][j] = k;
                            if (solve(board)) {
                                return true;
                            } else {
                                board[i][j] = '.';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    bool check(vector<vector<char>>& board,int x,int y,int k) {
        for (int i = 0; i < board.size(); i ++) if (i != x && board[i][y] == k) return false;
        for (int j = 0; j < board[0].size(); j ++) if (j != y && board[x][j] == k) return false;
        for (int i = x / 3 * 3; i < (x / 3 + 1) * 3; i ++) {
            for (int j = y / 3 * 3; j < (y / 3 + 1) * 3; j ++) {
                if (i != x && j != y && board[i][j] == k) {
                    return false;
                }
            }
        }
        return true;
    }

    
};
