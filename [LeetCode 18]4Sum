Description:
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

Solution:
排序，先确定两个数，然后在O(n)里找另外两个数，主要思路是两边一起往中间缩，总时间复杂度O(n^3)

Code:
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        set<vector<int>> s;
        vector<vector<int>> res;
        if (nums.size() < 4) return res;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size() - 2; i ++) {
            for (int j = i + 1; j < nums.size() - 1; j ++) {
                int left = j + 1;
                int right = nums.size() - 1;
                int tar = target - nums[i] - nums[j];
                while (left < right) {
                    if (nums[left] + nums[right] == tar) {
                        vector<int> temp;
                        temp.push_back(nums[i]);
                        temp.push_back(nums[j]);
                        temp.push_back(nums[left]);
                        temp.push_back(nums[right]);
                        s.insert(temp);
                        left ++;
                        right --;
                    }
                    while(left < right && nums[left] + nums[right] < tar) left ++;
                    while(left < right && nums[left] + nums[right] > tar) right --;
                }
            }
        }
        
        for (auto vec : s) {
            res.push_back(vec);
        }
        return res;
    }
};
