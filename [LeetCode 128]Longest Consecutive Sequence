Description:
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.

Your algorithm should run in O(n) complexity.

Subscribe to see which companies asked this question.

Solution:
一开始我想到用map做，纠结了一下map的查找代价好像是O(logn)，然后想着维护的时候是以单个数来维护连续的长度，但是好像不得行，想了阵子没想出解决方案。
最后看了下别人的solution，用了unordered_map，用的hash_map，查找代价O(1)。
然后用map维护的时候维护整个序列的边界，边界，边界！因为是需要找最长的连续串，连续的只要维护其边界就行了！！！边界！
总共有几种情况，当遍历到数字i，且i不在map中时
1.i+1和i-1都不在map中，m[i] = 1
2.i+1和i+1都在map中，m[i] = m[i + m[i + 1]] = m[i - m[i - 1]] = m[i - 1] + m[i + 1] + 1(连通了两边的边界，原边界不变，进行记录)
3.只有i+1在map中，m[i] = m[i + m[i + 1]] + 1(这里m[i + m[i + 1]] = m[i + 1]，因为是以前的边界，扩展了左边界，右边界记录)
4.只有i-1在map中，m[i] = m[i - m[i - 1]] + 1（扩展了右边界，左边界记录）

Code:
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_map<int, int> m;
        int res = 0;
        for (int i : nums) {
            if (m[i]) continue;
            res = max(res, m[i] = m[i + m[i + 1]] = m[i - m[i - 1]] = m[i - 1] + m[i + 1] + 1);
        }
        return res;
    }
};
