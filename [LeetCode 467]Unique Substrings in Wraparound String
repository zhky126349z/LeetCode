Description:
Consider the string s to be the infinite wraparound string of "abcdefghijklmnopqrstuvwxyz", so s will look like this: "...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....".

Now we have another string p. Your job is to find out how many unique non-empty substrings of p are present in s. In particular, your input is the string p and you need to output the number of different non-empty substrings of p in the string s.

Note: p consists of only lowercase English letters and the size of p might be over 10000.

Example 1:
Input: "a"
Output: 1

Explanation: Only the substring "a" of string "a" is in the string s.
Example 2:
Input: "cac"
Output: 2
Explanation: There are two substrings "a", "c" of string "cac" in the string s.
Example 3:
Input: "zab"
Output: 6
Explanation: There are six substrings "z", "a", "b", "za", "ab", "zab" of string "zab" in the string s.

Solution:
DP题，最后只要计算以"a","b",...,"z"结尾的子串的最大长度即可，最后全部相加即为答案。
顺序遍历字符串，记录当前最长串长度，动态更新以当前字符结尾的串的最大长度。

Code:
class Solution {
public:
    int findSubstringInWraproundString(string p) {
        int leter[26];
        int len = 0;
        int ans = 0;
        memset(leter, 0, sizeof(leter));
        for (int i = 0; i < p.length(); i ++) {
            int cur = p[i] - 'a';
            if (i == 0) {
                len ++;
            } else if (p[i] - p[i - 1] == 1 || (p[i] == 'a' && p[i - 1] == 'z')) {
                len ++;
            } else {
                len = 1;
            }
            if (len > leter[cur]) {
                leter[cur] = len;
            }
        }
        for (int i = 0; i < 26; i ++) {
            ans += leter[i];
        }
        return ans;
    }
};
