Description:
Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

Solution:
快慢指针

Code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if (head == NULL) return false;
        ListNode* slow = head;
        ListNode* fast = head;
        
        do {
            slow = slow->next;
            if (fast->next != NULL && fast->next->next != NULL) {
                fast = fast->next->next;    
            } else {
                fast = NULL;
            }
        } while (fast != NULL && slow != fast);
            
        if (slow != NULL && slow == fast) {
            return true;
        } else {
            return false;
        }
    }
};
