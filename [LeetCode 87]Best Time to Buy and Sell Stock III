Description:
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Solution:
最多只能进行两次交易，所以把整个时间段划分为两个部分，profit[k]表示，0<=i<=k第一次交易所在时间段，k<=j<=len第二次交易所在时间段，前后最大收益的相加值。

Code:
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int len = prices.size();
        int res = 0;
        vector<int> profit(len, 0);
        
        int min = INT_MAX;
        int pro = 0;
        
        for (int i = 0; i < len; i ++) {
            if (pro < prices[i] - min) pro = prices[i] - min;
            profit[i] += pro;
            if (prices[i] < min) min = prices[i];
        }
        
        int max = -1;
        pro = 0;
        for (int i= len - 1; i >= 0; i --) {
            if (pro < max - prices[i]) pro = max - prices[i];
            profit[i] += pro;
            if (prices[i] > max) max = prices[i];
        }
        
        for (int i = 0; i < len; i ++) {
            if (profit[i] > res) res = profit[i];
        }
        return res;
    }
};
