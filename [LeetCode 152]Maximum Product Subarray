Description:
Find the contiguous subarray within an array (containing at least one number) which has the largest product.

For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6.

Solution:
我的想法，递归解决，如果有0，取0和左右两边最大的，负数是偶数个则全部乘起来，如果负数是1个则取该负数和左右两边最大，如果是奇数则算取最左边还是最右边的奇数是
DP解法。用两个数组来存储，maxPro[i]表示以i结尾的乘积最大的子串的值，minPro[i]表示以i结尾的乘积最小的子串的值。
maxPro[i] = max(nums[i], maxPro[i - 1] * nums[i], minPro[i - 1] * nums[i])
minPro[i] = min(nums[i], maxPro[i - 1] * nums[i], minPro[i - 1] * nums[i])
res = max(res, maxPro[i])

Code:
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        return maxPro(nums, 0, nums.size());
    }
    
    int maxPro(vector<int> nums, int begin, int end) {
        if (begin >= end) return -INT_MAX;
        int cnt = 0;
        int res = 1;
        vector<int> indexs;
        for (int i = begin; i < end; i ++) {
            if (nums[i] == 0) {
                return max(0, max(maxPro(nums, begin, i), maxPro(nums, i + 1, end)));
            } else if (nums[i] < 0) {
                cnt ++;
                indexs.push_back(i);
            }
        }
        if (cnt == 1) {
            return max(nums[indexs[0]], max(maxPro(nums, begin, indexs[0]), maxPro(nums, indexs[0] + 1, end)));
        } else if (cnt % 2 == 1) {
            int tempLeft = 1;
            int tempRight = 1;
            for (int i = begin; i <= indexs[0]; i ++) {
                tempLeft = tempLeft * nums[i];
            }
            for (int i = indexs[indexs.size() - 1]; i < end; i ++) {
                tempRight = tempRight * nums[i];
            }
            for (int i = indexs[0] + 1; i < indexs[indexs.size() - 1]; i ++) {
                res = res * nums[i];
            }
            res = res * min(tempLeft, tempRight);
        } else {
            for (int i = begin; i < end; i ++) {
                res = res * nums[i];
            }
        }
        
        
        return res;
    }
    
};




class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int len = nums.size();
        if (len == 0) return 0;
        vector<int> maxPro(len, 0);
        vector<int> minPro(len, 0);
        maxPro[0] = nums[0];
        minPro[0] = nums[0];
        int res = maxPro[0];
        for (int i = 1; i < len; i ++) {
            maxPro[i] = max(nums[i], max(maxPro[i - 1] * nums[i], minPro[i - 1] * nums[i]));
            minPro[i] = min(nums[i], min(maxPro[i - 1] * nums[i], minPro[i - 1] * nums[i]));
            res = max(res, maxPro[i]);
        }
        return res;
    }
};
