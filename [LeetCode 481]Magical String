Description:
A magical string S consists of only '1' and '2' and obeys the following rules:

The string S is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string S itself.

The first few elements of string S is the following: S = "1221121221221121122……"

If we group the consecutive '1's and '2's in S, it will be:

1 22 11 2 1 22 1 22 11 2 11 22 ......

and the occurrences of '1's or '2's in each group are:

1 2	2 1 1 2 1 2 2 1 2 2 ......

You can see that the occurrence sequence above is the S itself.

Given an integer N as input, return the number of '1's in the first N number in the magical string S.

Note: N will not exceed 100,000.

Example 1:
Input: 6
Output: 3
Explanation: The first 6 elements of magical string S is "12211" and it contains three 1's, so return 3.

Solution:
前三个手动处理，之后可以根据每一位的数字往后生成整个数列，直到n为止，然后计算所有1的个数。复杂度O(n)

Code:
class Solution {
public:
    int magicalString(int n) {
        int res = 0;
        if (n == 0) return 0;
        if (n <= 3) return 1;
        int comIndex = 2;
        vector<int> nums(n + 2, 0);
        nums[0] = 1;
        nums[1] = 2;
        nums[2] = 2;
        for (int i = 2; i < n;) {
            if (nums[comIndex] == 1) {
                nums[++ i] = (nums[i - 1] == 1) ? 2 : 1;
            } else{
                nums[++ i] = (nums[i - 1] == 1) ? 2 : 1;
                nums[++ i] = (nums[i - 1] == 1) ? 1 : 2;
            }
            comIndex ++;
        }
        
        for (int i = 0; i < n; i ++) {
            if (nums[i] == 1) res ++;
        }
        return res;
    }
};
