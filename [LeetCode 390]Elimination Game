Description:
There is a list of sorted integers from 1 to n. Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.

Repeat the previous step again, but this time from right to left, remove the right most number and every other number from the remaining numbers.

We keep repeating the steps again, alternating left to right and right to left, until a single number remains.

Find the last number that remains starting with a list of length n.

Example:

Input:
n = 9,
1 2 3 4 5 6 7 8 9
2 4 6 8
2 6
6

Output:
6

Solution:
记录每次剩下的数字的开头，最后只剩下一个的时候就是它。
或者利用递归，L(n)=2 * R(n/2),R(n)=2 * L(n/2) + (n % 2) - 1

Code:
class Solution {
public:
    int lastRemaining(int n) {
        int head = 1;
        int step = 1;
        int remain = n;
        bool left = true;
        while (remain > 1) {
            if (left || remain % 2 == 1) {
                head = head + step;
            }
            step = step * 2;
            left = !left;
            remain = remain / 2;
        }
        return head;
    }
};

class Solution {
public:
    int lastRemaining(int n) {
        return left(n);
    }
private:
    int left(int n) {
        if (n <= 2) return n;
        return 2 * right(n / 2);
    }
    
    int right(int n) {
        if (n <= 2) return 1;
        return 2 * left(n / 2) + n % 2 - 1;
    }
};
