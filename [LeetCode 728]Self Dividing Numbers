Description:
A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]

Solution:
Straightforward

Code:
class Solution {
public:
    vector<int> selfDividingNumbers(int left, int right) {
        vector<int> res;
        for (int i = left; i <= right; i ++) {
            int temp = i;
            int reminder = 0;
            bool flag = true;
            while(temp > 0) {
                reminder = temp % 10;
                if (reminder == 0 || i % reminder != 0) {
                    flag = false;
                    break;
                }
                temp = temp / 10;
            }
            if (flag) res.push_back(i);
        }
        return res;
    }
};
