Description:
You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).

Note:

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:

Given input matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

rotate the input matrix in-place such that it becomes:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
Example 2:

Given input matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
], 

rotate the input matrix in-place such that it becomes:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]

Solution:
顺时针旋转矩阵90度，但是必须in-place，
一开始想法是想试试传统把一列一列分别移到指定位置，能不能在in-place完成，发现不大现实顺序会乱。
然后想到可以一圈一圈按照定义把对应的元素移到结果位置，
这样只需要一个额外的变量记录一个元素，然后不断交换就可以。
一开始实现的时候直接用递归去实现了，后来发现是可以在一个while内实现的，空间复杂度O(1)

Code:
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        //rotateHelper(matrix, matrix.size(), 0);
        int start = 0;
        int end = matrix.size() - 1;
        int temp;
        while(start < end) {
            for (int i = 0; i < end - start; i ++) {
                temp = matrix[start][start + i];
                matrix[start][start + i] = matrix[end - i][start];
                matrix[end - i][start] = matrix[end][end - i];
                matrix[end][end - i] = matrix[start + i][end];
                matrix[start + i][end] = temp;
            }
            start ++;
            end --;
            
        }
        return ;
    }
    
    // void rotateHelper(vector<vector<int>>& matrix, int n, int start) {
    //     if (n <= 0) return;
    //     for (int i = 0; i < n - 1; i ++) {
    //         int temp_pre;
    //         int temp_now;
    //         temp_pre = matrix[start][start + i];
    //         temp_now = matrix[start + i][start + n - 1];
    //         matrix[start + i][start + n - 1] = temp_pre;
    //         temp_pre = temp_now;
    //         temp_now = matrix[start + n - 1][start + n - 1 - i];
    //         matrix[start + n - 1][start + n - 1 - i] = temp_pre;
    //         temp_pre = temp_now;
    //         temp_now = matrix[start + n - 1 - i][start];
    //         matrix[start + n - 1 - i][start] = temp_pre;
    //         matrix[start][start + i] = temp_now;
    //     }
    //     return rotateHelper(matrix, n - 2, start + 1);
    // }
    
};
