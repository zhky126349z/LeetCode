Description:
Given a non-empty 2D matrix matrix and an integer k, find the max sum of a rectangle in the matrix such that its sum is no larger than k.

Example:
Given matrix = [
  [1,  0, 1],
  [0, -2, 3]
]
k = 2
The answer is 2. Because the sum of rectangle [[0, 1], [-2, 3]] is 2 and 2 is the max number no larger than k (k = 2).

Note:
The rectangle inside the matrix must have an area > 0.
What if the number of rows is much larger than the number of columns?

Solution:
首先将问题一步步分解。
第一步：
如何求一个矩阵中的子矩阵的最大和，确定起始行（列），从起始行（列）开始遍历到最后一行（列），作为终点行（列）。
不断的将下一行（列）的值累加到已由行（列）上，然后求出该累加和行（列）的最大连续和，若比当前最大值大则更新。
第二步：
如果没有<=k的要求，则问题转化为求数组中的最大连续和，为dp问题，在O(n)时间内可以解决，
动态转移方程sum = max(nums[i], sum + nums[i])，sum的最大值即为连续的最大和。
如果有<=k的要求，则问题转化为求数组中<=k的最大连续和，无法作为dp来解决，
因为将其划分为子问题时，子问题必须变成前状态的<=k的最大和，但是当有负数的时候这个子问题的结果不一定是最优结果，
比如2,2,-1，k=3。
解决方法，遍历数组，累加和存入set，每次取set的lower_bound(当前和 - k)，即取最小的大于等于当前和-k的值，更新结果。
本来该方法和遍历起始和终点没差别，O(n^2)，但是用了lower_bound()之后，因为set采用二分查找，所以开销变为O(nlogn)
第三步：
trick
可以先用O(n)遍历一次，看看获得的局部最大值是否<=k，如果<=k则可以直接更新不必要后面再算，如果不满足则再算一遍
在某些情况提升性能

Code:
class Solution {
public:
    int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {
        if (matrix.size() == 0) return 0;
        int n = matrix.size();
        int m = matrix[0].size();
        int res = -(INT_MAX - 1);

        for (int i = 0; i < m; i ++) {
            vector<int> temp(n, 0);
            for (int j = i; j < m; j ++) {
                // add column
                for (int l = 0; l < n; l ++) {
                    temp[l] += matrix[l][j];
                }

                int sum = 0;
                int local_max = -(INT_MAX - 1);
                
                for (int l = 0; l < n; l ++) {
                    sum = max(temp[l], sum + temp[l]);
                    local_max = max(sum, local_max);
                    if (sum == k) return k;
                }
                if (local_max <= k && local_max > -(INT_MAX - 1)) {
                    res = max(local_max, res);
                    continue;
                }
                
                sum = 0;
                set<int> csum;
                csum.insert(sum);
                for (int l = 0; l < n; l ++) {
                    sum += temp[l];
                    if (csum.lower_bound(sum - k) != csum.end()) {
                        res = max(res, sum - *csum.lower_bound(sum - k));
                        if (res == k) return k;
                    }
                    csum.insert(sum);
                }


            }

        }
        return res;
    }
};
