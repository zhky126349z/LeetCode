Description:
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Solution:
因为不限制买卖次数，而且必须在买入前卖出，所以直接从后往前遍历，计算相邻差异并直接累加。即寻找单调序列

Code:
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int res = 0;
        
        for (int i = prices.size() - 1; i > 0; i --) {
            if (prices[i] > prices[i - 1]) {
                res += prices[i] - prices[i - 1];
            }
        }
        return res;
    }
};
