Description:
Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

For example:

Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].

Note:
The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

Solution:
利用位运算，亦或，相同为0不同为1，a^a=0，0^a=a，先把所有数亦或一下，最后得到的肯定是那两个不同的数字的亦或结果。
然后根据亦或的定义，得到他们不同的那一位。然后把所有数字分成两组，一组是那一位是0的，一组是那一位是1的，不同的两个数字肯定在不同的组。

Code:
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        vector<int> res(2, 0);
        int dif = 0;
        for (auto i : nums) { dif ^= i; }
        dif &= -dif;
        for (auto i : nums) {
            if ((dif & i) == 0) {
                res[0] ^= i;
            }else {
                res[1] ^= i;
            }
        }
        return res;
    }
};
