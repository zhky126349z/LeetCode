Description:
Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example:
Given 1->2->3->4->5->NULL,
return 1->3->5->2->4->NULL.

Note:
The relative order inside both the even and odd groups should remain as it was in the input. 
The first node is considered odd, the second node even and so on ...

Credits:
Special thanks to @DjangoUnchained for adding this problem and creating all test cases.

Solution:
一开始想法是内部交换，发现怎么搞都顺序不大对，很难通过交换来达到最终目的。
后来发现可以用链表的性质，可以直接把基数结点连接在一起，偶数结点连接在一起，然后把两条链连接。

Code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (head == NULL|| head -> next == NULL || head -> next -> next == NULL) return head;
        ListNode* oddHead = head;
        ListNode* evenHead = head->next;
        ListNode* odd = oddHead;
        ListNode* even = evenHead;
        ListNode* p = evenHead -> next;
        while(p) {
            odd -> next = p;
            odd = odd -> next;
            p = p -> next;
            even -> next = p;
            even = even -> next;
            if (p) {
                p = p -> next;
            }
        }
        odd -> next = evenHead;
        return oddHead;
    }
};
