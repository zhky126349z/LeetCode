Description:
Given an array nums of integers, you can perform operations on the array.

In each operation, you pick any nums[i] and delete it to earn nums[i] points. After, you must delete every element equal to nums[i] - 1 or nums[i] + 1.

You start with 0 points. Return the maximum number of points you can earn by applying such operations.

Example 1:
Input: nums = [3, 4, 2]
Output: 6
Explanation: 
Delete 4 to earn 4 points, consequently 3 is also deleted.
Then, delete 2 to earn 2 points. 6 total points are earned.
Example 2:
Input: nums = [2, 2, 3, 3, 3, 4]
Output: 9
Explanation: 
Delete 3 to earn 3 points, deleting both 2's and the 4.
Then, delete 3 again to earn 3 points, and 3 again to earn 3 points.
9 total points are earned.
Note:

The length of nums is at most 20000.
Each element nums[i] is an integer in the range [1, 10000].

Solution:
DP题。
1.排序。
2.把所有冗余加起来，得到两个数组，一个是所有不相同的按序排列的元素，另一个是其对应的所有和其相同的元素的和。
3.DP。用两个数组或者二维数组来记录，拿或者不拿，不拿就没有条件dp[i][0] = max(dp[i - 1][0], dp[i - 1][1]),拿的话需要判断是否是前一个元素的+1值，
如果是则dp[i][1] = dp[i - 1][0] + nums[i];
如果不是则dp[i][1] = max(dp[i - 1][0], dp[i - 1][1]) + nums[i];

Code:
class Solution {
public:
    int deleteAndEarn(vector<int>& nums) {
        if (nums.size() == 0) return 0;
        sort(nums.begin(), nums.end());
        vector<int> sums;
        vector<int> indexs;
        int cnt = -1;
        for (int i = 0; i < nums.size(); i ++) {
            if (cnt == -1 || nums[i] != nums[i - 1]) {
                indexs.push_back(nums[i]);
                sums.push_back(nums[i]);
                cnt ++;
            } else {
                sums[cnt] += nums[i];
            }
        }
        
        int len = indexs.size();
        int dp[len][2];
        memset(dp, 0, sizeof(dp));
        dp[0][1] = sums[0];
        for (int i = 1; i < len; i ++) {
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1]);
            if (indexs[i] == indexs[i - 1] + 1) {
                dp[i][1] = dp[i - 1][0] + sums[i];
            } else {
                dp[i][1] = max(dp[i - 1][0] + sums[i], dp[i - 1][1] + sums[i]);
            }
        }
        
        return max(dp[len - 1][0], dp[len - 1][1]);
    }
};
