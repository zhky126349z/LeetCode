Description:
Given a list of strings words representing an English Dictionary, find the longest word in words that can be built one character at a time by other words in words. If there is more than one possible answer, return the longest word with the smallest lexicographical order.

If there is no answer, return the empty string.
Example 1:
Input: 
words = ["w","wo","wor","worl", "world"]
Output: "world"
Explanation: 
The word "world" can be built one character at a time by "w", "wo", "wor", and "worl".
Example 2:
Input: 
words = ["a", "banana", "app", "appl", "ap", "apply", "apple"]
Output: "apple"
Explanation: 
Both "apply" and "apple" can be built from other words in the dictionary. However, "apple" is lexicographically smaller than "apply".
Note:

All the strings in the input will only contain lowercase letters.
The length of words will be in the range [1, 1000].
The length of words[i] will be in the range [1, 30].

Solution:
Trie+DFS，先建一个字典树然后DFS找最长通路的路径string。
或者用一个set存，先排序nlogn然后当当前string长度为1或者string.substr(0, lenght - 1)的在set里的话，就把它也加入set，并更新res

Code:
class Solution {
public:
    string longestWord(vector<string>& words) {
        string res;
        string cur;

        //generate Trie
        TreeNode* root = new TreeNode(' ', 1);
        for (auto word : words) {
            TreeNode* p = root;
            for (int i = 0; i < word.length(); i ++) {
                if (p->child[word[i] - 'a'] == NULL) {
                    p->child[word[i] - 'a'] = new TreeNode(word[i], 0);
                }
                p = p->child[word[i] - 'a'];
                if (i == word.length() - 1) {
                    p->cnt = 1;
                }
            }
        }

        //DFS
        DFS(root, res, cur);

        return res.substr(1);
    }

private:
    struct TreeNode {
        char ch;
        int cnt;
        vector<TreeNode*> child;
        TreeNode(char x, int count) : ch(x), cnt(count), child(vector<TreeNode*>(26, NULL)) {}
    };

    bool DFS(TreeNode* node, string& res, string& cur) {
        if (node->cnt == 0) {
            return false;
        }

        cur.push_back(node->ch);
        if (cur.length() > res.length()) {
            res = cur;
        }
        for (int i = 0; i < 26; i ++) {
            if (node->child[i] != NULL) {
                DFS(node->child[i], res, cur);
            }
        }
        cur.pop_back();
        return true;
    }

};
