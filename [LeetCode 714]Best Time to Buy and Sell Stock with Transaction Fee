Description:
Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.

You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)

Return the maximum profit you can make.

Example 1:
Input: prices = [1, 3, 2, 8, 4, 9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
Buying at prices[0] = 1
Selling at prices[3] = 8
Buying at prices[4] = 4
Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Note:

0 < prices.length <= 50000.
0 < prices[i] < 50000.
0 <= fee < 50000.

Solution:
两个状态的dp。
第i天有两个状态，
买入状态buy[i]代表在K天买入时的最大获益，K<=i，并且你可以在i+1天卖出或者啥也不干。
卖出状态sel[i]代表在K天卖出时的最大获益，K<=i，并且你可以在i+1天买入或者啥也不干。
所以状态转移方程为：
buy[i] = max(buy[i-1],sell[i-1]-prices[i])
sell[i] = max(sell[i-1],buy[i-1]+prices[i] - fee)
buy[0] = -prices[0], sell[0] = 0

Code:
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        vector<int> buy(prices.size(), 0);
        vector<int> sell(prices.size(), 0);
        buy[0] = -1 * prices[0];
        for (int i = 1; i < prices.size(); i ++) {
            buy[i] = max(buy[i - 1], sell[i - 1] - prices[i]);
            sell[i] = max(sell[i - 1], buy[i - 1] + prices[i] - fee);
        }
        return sell[prices.size() - 1];
    }
};
