Description:
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example 1:
[[1,3,1],
 [1,5,1],
 [4,2,1]]
Given the above grid map, return 7. Because the path 1→3→1→1→1 minimizes the sum.


Solution:
DP，dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]。因为只跟他的上和左两个值有关，所以可以优化到一个数组里。时间复杂度O（mn）。

Code:
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if (grid.size() == 0) return 0;
        int m = grid.size();
        int n = grid[0].size();
        int dp[n];
        memset(dp, 0, sizeof(dp));
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                if (i == 0 && j == 0) dp[j] = grid[i][j];
                else {
                    dp[j] = min(j > 0 ? dp[j - 1] : INT_MAX, i > 0 ? dp[j] : INT_MAX) + grid[i][j];
                }
            }
        }
        return dp[n - 1];
    }
};
