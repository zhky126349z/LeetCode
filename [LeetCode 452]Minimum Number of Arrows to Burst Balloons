Description:
There are a number of spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter and hence the x-coordinates of start and end of the diameter suffice. Start is always smaller than end. There will be at most 104 balloons.

An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with xstart and xend bursts by an arrow shot at x if xstart ≤ x ≤ xend. There is no limit to the number of arrows that can be shot. An arrow once shot keeps travelling up infinitely. The problem is to find the minimum number of arrows that must be shot to burst all balloons.

Example:

Input:
[[10,16], [2,8], [1,6], [7,12]]

Output:
2

Explanation:
One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).

Solution:
题意大概就是给定很多区间，然后找最少能穿过所有区间的直线数量。
一开始考虑贪心，但是没想到要怎么去贪。后来想到先按照起始点进行排序，然后从左向右遍历区间，判断每个区间的起始点与维护的最小结束点的关系。
然后忘记考虑了最小结束点是需要更新的，在遍历时每次需要将最小结束点更新为最小的结束点。
贪心成功。
另外，comp函数要写成静态的，不然会报错。

Code:
class Solution {
public:
    static bool comp(pair<int, int> a, pair<int, int> b) {
        if (a.first < b.first) {
            return true;
        } else if (a.first == b.first) {
            return a.second < b.second;
        }
        return false;
    }
    
    int findMinArrowShots(vector<pair<int, int>>& points) {
        sort(points.begin(), points.end(), comp);
        int cnt = 0;
        int right = 0;
        for (auto p : points) {
            if (right == 0) {
                right = p.second;
                cnt++;
            }
            if (p.first <= right && p.second >= right) {
                continue;
            }else if (p.first <= right && p.second < right) {
                right = p.second;
            }else{
                right = p.second;
                cnt ++;
            }
        }
        return cnt;
    }
};
