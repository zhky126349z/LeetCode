Description:
Given a binary tree

struct TreeLinkNode {
  TreeLinkNode *left;
  TreeLinkNode *right;
  TreeLinkNode *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

Note:

You may only use constant extra space.
Recursive approach is fine, implicit stack space does not count as extra space for this problem.
You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).
Example:

Given the following perfect binary tree,

     1
   /  \
  2    3
 / \  / \
4  5  6  7
After calling your function, the tree should look like:

     1 -> NULL
   /  \
  2 -> 3 -> NULL
 / \  / \
4->5->6->7 -> NULL

Solution:
第一种方法，层序遍历，插个NULL标志一下就行，可以应对各种奇怪的树
第二种方法，因为是完美二叉树，所以可以使用，递归调用自己，每次对一个结点处理三件事
node->left->next = node->right
node->rigth->next = node->next->left
就是递归的时候只关注自己的左右结点，自身不用处理，还有一些边界判断

Code:
/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if (root == NULL) return;
        if (root->left && root->right) {
            root->left->next = root->right;
            if (root->next && root->next->left) {
                root->right->next = root->next->left;
            }
            connect(root->left);
            connect(root->right);
        }

        // queue<TreeLinkNode*> q;
        // if (root == NULL) return;
        // q.push(root);
        // q.push(NULL);
        // while(!q.empty()) {
        //     if (q.front() == NULL) {
        //         q.pop();
        //         if (q.empty()) {
        //             break;
        //         }
        //         q.push(NULL);
        //     }
        //     auto first = q.front();
        //     q.pop();
        //     first->next = q.front();
        //     if (first->left) q.push(first->left);
        //     if (first->right) q.push(first->right);
        // }
        // return;
    }
};
