Description:
Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

Example 1:
Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
Example 2:
Input: 

          1
         /  
        3    
       / \       
      5   3     

Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).
Example 3:
Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).
Example 4:
Input: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).


Note: Answer will in the range of 32-bit signed integer.

Solution:
层次遍历。但是需要计算每层最左和最右，需要知道结点位于哪一层，所以这里使用一个push NULL的操作来记录同一层的结尾。每次遍历一层的时候记录下最左的位置和最右的位置。
每个位置为i的结点左儿子2i，右儿子2i+1（从1开始）
需要处理完全右树的情况，如果一层只有一个结点，则把这个结点的位置重置为1，来防止溢出。

Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        int res = 0;
        int cnt = 0;
        queue<TreeNode*> nodes;
        queue<int> pos;
        nodes.push(root);
        nodes.push(NULL);
        cnt ++;
        pos.push(1);
        while(!nodes.empty()) {
            int tmpPos = 0;
            int left = INT_MAX;
            int right = 0;
            bool isOneNode = false;
            if (cnt == 1) isOneNode = true;
            cnt = 0;
            while (nodes.front() != NULL) {
                TreeNode* node = nodes.front();
                nodes.pop();
                tmpPos = pos.front();
                pos.pop();
                if (isOneNode) tmpPos = 1;
                left = min(left, tmpPos);
                right = max(right, tmpPos);
                if (node->left != NULL) {
                    nodes.push(node->left);
                    pos.push(tmpPos * 2);
                    cnt ++;
                }
                if (node->right != NULL) {
                    nodes.push(node->right);
                    pos.push(tmpPos * 2 + 1);
                    cnt ++;
                }
            }
            nodes.pop();
            nodes.push(NULL);
            if (nodes.front() == NULL) {
                nodes.pop();
            }
            res = max(res, right - left);
        }
        return res + 1;
    }
};
