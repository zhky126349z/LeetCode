Description:
Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

Example:

Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13

Solution:
BST的中序遍历严格保证递增，题意想要把某一结点的值加上所有比他大的值的和，考虑使用递归完成逆中序遍历（即右中左），维护一个add变量即为所有比当前结点值大的值的和。

Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    int add = 0;
    
    TreeNode* travel(TreeNode * node) {
        if (node == NULL) {
            return node;
        }
        travel(node -> right);
        node -> val += add;
        add = node -> val;
        travel(node -> left);
        return node;
    }
    
    TreeNode* convertBST(TreeNode* root) {
        travel(root);
        return root;
    }
};
