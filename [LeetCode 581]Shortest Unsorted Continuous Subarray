Description:
Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.

Solution:
第一次遍历找出第一个比左边小位置，初始左边界。第二次遍历找初始右边界。然后遍历界内数字，如果比边界小/大，就扩大边界直到满足要求。
特殊情况，本身就是顺序的，用一个标记来区分。

Code:
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int left = 0;
        int right = nums.size() - 1;
        bool jud = false;
        
        for (int i = 1; i < nums.size(); i ++) {
            if (nums[i - 1] > nums[i]) {
                jud = true;
                left = i - 1;
                break;
            }
        }
        
        for (int i = nums.size() - 2; i >= 0; i --) {
            if (nums[i + 1] < nums[i]) {
                jud = true;
                right = i + 1;
                break;
            }
        }
        
        for (int i = left; i <= right; i ++) {
            while (left > 0 && nums[i] < nums[left - 1]) {
                left --;
            }
            while (right < nums.size() - 1 && nums[i] > nums[right + 1]) {
                right ++;
            }
        }
        
        if (jud == false)
            return 0;
        return right - left + 1;
    }
};
