Description:
Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.

For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).

Note: You may assume that n is not less than 2 and not larger than 58.

Credits:
Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.

Solution:
一开始想法是如果要把一个数拆成x部分，乘积最大，那么每部分肯定尽量相同，所以利用n / x和n % x得到所有的数，计算结果，
然后循环拆成几部分最大，最后得到结果。
后来发现是个DP，
dp[i]表示，把i拆分后可以得到的最大乘积，
dp[i] = max(dp[i], j * max(i - j, dp[i - j])) (1 <= j < i)，
就是每次都把一个数拆成两部分，j部分不会再被拆分，然后i-j部分要么是使用原值，要么是拆分，取最大值，
i从i~n，所以每次计算dp[i]的时候，前面的值都已经被计算过了。

Code:
class Solution {
public:
    int integerBreak(int n) {
        /*
        int res = 0;
        for (int i = 2; i <= n; i ++) {
            int tmpRes = 1;
            int num = n / i;
            int remainder = n % i;
            for (int j = 0; j < remainder; j ++) {
                tmpRes = tmpRes * (num + 1);
            }
            for (int j = 0; j < i - remainder; j ++) {
                tmpRes = tmpRes * num;
            }
            res = max(tmpRes, res);
        }
        return res;
        */
        vector<int> dp(n + 1, 1);
        for (int i = 1; i <= n; i ++) {
            for (int j = 1; j <= i / 2; j ++) {
                dp[i] = max(dp[i], j * max(i - j, dp[i - j]));
            }
        }
        return dp[n];
    }
};
