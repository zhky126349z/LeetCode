Description:
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Solution:
两次二分查找，第一次二分查找旋转点（最大的元素的位置）。
第二次二分查找目标，时间复杂度O(logn)

Code:
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if (nums.size() == 0) return -1;
        int left = 0;
        int right = nums.size() - 1;
        int mid = (left + right) / 2;
        int pivot = right;
        while(left < right && nums[left] > nums[right]) {
            mid = (left + right) / 2;
            if (nums[mid] > nums[left]) {
                left = mid;
            } else if (nums[mid] < nums[right]) {
                right = mid;
            }
            if (nums[left] > nums[left + 1]) {
                pivot = left;
                break;
            }
        }
        
        left = 0;
        right = nums.size() - 1;
        if (target >= nums[left]) {
            right = pivot;
        } else if (target < nums[left]) {
            left = pivot + 1;
        }
        
        while(left <= right) {
            mid = (left + right) / 2;
            if (target == nums[mid]) {
                return mid;
            } else if (target < nums[mid]) {
                right = mid - 1;
            } else if (target > nums[mid]) {
                left = mid + 1;
            }
        }
        
        
        return -1;
    }
};
