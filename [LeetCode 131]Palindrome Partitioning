Description:
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]

Solution:
找所有回文串切割的组合，典型dfs。
注意如果你返回了一个vector对象，那么在调用函数里接收的还是该对象的地址，不要对其进行二次操作或赋值(除非你明白你在做什么)
vector的push_back会对push的对象进行一次浅拷贝，所以如果你push的一个vector里如果是一些string或者int，那么ok，如果是对象，慎重。
第一次我用了记忆化的dfs，但是耗时反而比较高，我觉得是因为需要各种对vector进行拷贝，因此比较耗时。
具体方法为，当前缀为回文串时，把前缀压入cur作为一个切割，然后继续dfs，之后pop掉这次的结果搜索下一次可能性
  cur.push_back(s.substr(start, i - start + 1));
  dfs(s, i + 1, cur, res);
  cur.pop_back();
如果当前start值已经到了s的结尾，则说明这是一个正确的切割结果，把cur压入res
  if (start == s.length()) {
    res.push_back(cur);
    return;
  }
记忆化可以在return前把当前s对应的结果进行存储，但是比较麻烦因为是vector<vector<string>>

Code:
class Solution {

private:
    bool palindrome(string &s, int start, int end) {
        while(start <= end) {
            if (s[start] == s[end]) {
                start ++;
                end --;
            } else {
                return false;
            }
        }
        return true;
    }

    void dfs(string &s, int start, vector<string> &cur, vector<vector<string>> &res) {
        if (start == s.length()) {
            res.push_back(cur);
            return;
        }

        for (int i = start; i < s.length(); i ++) {
            if (palindrome(s, start, i)) {
                cur.push_back(s.substr(start, i - start + 1));
                dfs(s, i + 1, cur, res);
                cur.pop_back();
            }
        }
        return ;
    }
    

public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        if (s.size() == 0) return res;
        vector<string> cur;
        dfs(s, 0, cur, res);
        return res;
    }
};

// class Solution {

// private:
//     unordered_map<string, vector<vector<string>>> mem;

//     bool palindrome(string s) {
//         int begin = 0;
//         int end = s.size() - 1;
//         while(begin <= end) {
//             if (s[begin] == s[end]) {
//                 begin ++;
//                 end --;
//             } else {
//                 return false;
//             }
//         }
//         return true;
//     }

// public:
//     vector<vector<string>> partition(string s) {
//         vector<vector<string>> res;
//         if (s.size() == 0) return res;
//         if (mem.find(s) != mem.end()) return mem[s];
//         for (int i = 1; i <= s.size(); i ++) {
//             if (palindrome(s.substr(0, i))) {
//                 if (i != s.size()) {
//                     vector<vector<string>> temp = partition(s.substr(i, s.size() - i));
//                     for (auto t : temp) {
//                         vector<string> cop(t.size());
//                         copy(t.begin(), t.end(), cop.begin());
//                         cop.insert(cop.begin(), s.substr(0, i));
//                         res.push_back(cop);
//                     }
//                 } else {
//                     vector<string> single;
//                     single.push_back(s);
//                     res.push_back(single);
//                 }
//             }
//         }
//         mem.insert(make_pair(s, res));
//         return res;
//     }
// };
