Description:

We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.

Every time you guess wrong, I'll tell you whether the number is higher or lower.

You call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):

-1 : My number is lower
 1 : My number is higher
 0 : Congrats! You got it!
Example:
n = 10, I pick 6.

Return 6.

Solution:
一个二分查找，主要在于取mid的时候，
以前我都喜欢mid = (begin + end) / 2，但是其实有着溢出的隐患，因为begin + end很可能就直接栈溢出，问题很大！！！！！！！！
请以后改写为mid = begin + (end - begin) / 2，终于知道为什么以前看答案的时候他们二分查找都这么写了

Code:
// Forward declaration of guess API.
// @param num, your guess
// @return -1 if my number is lower, 1 if my number is higher, otherwise return 0
int guess(int num);

class Solution {
public:
    int guessNumber(int n) {
        int begin = 1;
        int end = n;
        int mid;
        int temp = -1;
        while(begin <= end) {
            mid = begin + (end - begin) / 2;
            temp = guess(mid);
            if (temp == -1) {
                end = mid - 1;
            } else if (temp == 1) {
                begin = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
};
