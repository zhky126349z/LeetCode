Description:
On a 2 dimensional grid with R rows and C columns, we start at (r0, c0) facing east.

Here, the north-west corner of the grid is at the first row and column, and the south-east corner of the grid is at the last row and column.

Now, we walk in a clockwise spiral shape to visit every position in this grid. 

Whenever we would move outside the boundary of the grid, we continue our walk outside the grid (but may return to the grid boundary later.) 

Eventually, we reach all R * C spaces of the grid.

Return a list of coordinates representing the positions of the grid in the order they were visited.

 

Example 1:

Input: R = 1, C = 4, r0 = 0, c0 = 0
Output: [[0,0],[0,1],[0,2],[0,3]]


 

Example 2:

Input: R = 5, C = 6, r0 = 1, c0 = 4
Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]


Solution:
模拟题，我的做法是直接全部都tag一下，存的时候判断他在不在范围内。
步数规律，1,1,2,2,3,3...，所以不用存每次走那么多右转就行了

Code:
class Solution {
public:
    vector<vector<int>> spiralMatrixIII(int R, int C, int r0, int c0) {
        map<pair<int, int>, bool> vis;
        vector<vector<int>> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        vector<vector<int>> rig = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};
        int dirIndex = 0;
        vector<vector<int>> res;
        vector<int> st = {r0, c0};
        res.push_back(st);
        vis.insert(make_pair(make_pair(r0, c0), true));
        while(res.size() < R * C) {
            r0 = r0 + dir[dirIndex][0];
            c0 = c0 + dir[dirIndex][1];
            if (r0 >= 0 && r0 < R && c0 >= 0 && c0 < C) {
                vector<int> pr = {r0, c0};
                res.push_back(pr);
            }
            vis.insert(make_pair(make_pair(r0, c0), true));
            if (vis.find(make_pair(r0 + rig[dirIndex][0], c0 + rig[dirIndex][1])) == vis.end()) {
                dirIndex = (dirIndex + 1) % 4;
            }
        }
        return res;
    }
};
