Description:
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

Solution:
先确定一个值，然后跟两个数的和等于目标值一样，O(N)在数组中查找这样的数对，输出时先把结果排序一下然后加入一个set中以防止冗余。

Code:
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> fin;
        if (nums.size() < 3) {
            return fin;
        }
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size() - 1; i ++) {
            int target = -1 * nums[i];
            int left = i + 1, right = nums.size() - 1;
            while(left < right) {
                if (nums[left] + nums[right] == target) {
                    vector<int> tmp{nums[i], nums[left], nums[right]};
                    fin.push_back(tmp);
                    while (left  < right && nums[left] == nums[left + 1]) left ++;
                    while (left  < right && nums[right] == nums[right - 1]) right --;
                    left ++;
                    right --;
                }else if (nums[left] + nums[right] > target) {
                    right --;
                }else {
                    left ++;
                }
            }
            while (i + 1 < nums.size() && nums[i + 1] == nums[i]) i ++;
        }
        return fin;
    }
};
