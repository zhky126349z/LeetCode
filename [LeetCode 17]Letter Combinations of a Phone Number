Description:
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

Solution:
直接生成

Code:
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        vector<string> temp;
        if (digits.size() == 0) return res;
        res.push_back("");
        for (auto ch : digits) {
            int st = 0;
            int ed = 0;
            switch(ch) {
                case '2':
                    st = 0; ed = 2; break;
                case '3':
                    st = 3; ed = 5; break;
                case '4':
                    st = 6; ed = 8; break;
                case '5':
                    st = 9; ed = 11; break;
                case '6':
                    st = 12; ed = 14; break;
                case '7':
                    st = 15; ed = 18; break;
                case '8':
                    st = 19; ed = 21; break;
                case '9':
                    st = 22; ed = 25; break;
            }
            
            for (auto str : res) {
                for (int i = st; i <= ed; i ++) {
                    char add = 'a' + i;
                    temp.push_back(str + add);
                }
            }
            res = temp;
            temp.clear();
            
        }
        return res;
    }
};
