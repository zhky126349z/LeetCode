Description:
Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.

Note: The length of path between two nodes is represented by the number of edges between them.

Example 1:

Input:

              5
             / \
            4   5
           / \   \
          1   1   5
Output:

2
Example 2:

Input:

              1
             / \
            4   5
           / \   \
          4   4   5
Output:

2

Solution:
DFS，先一路访问到最底层，然后慢慢回溯，回溯的时候就以每个结点为中心，先计算左右两路最长的可能存在的路径之和为多少，然后取max，往上回溯的时候返回的参数
则是左右两边较长的那条路径。
我一开始的想法是自顶向下，以每一个结点作为转角/左右交汇处，去计算最长的路径，存在的问题是每一个结点都多遍历了好几次（logn次），总时间复杂度nlogn
并且最后还有问题， 我是知道我多遍历了好多次，但是想法是因为作为交汇点必须得到左右两边的和，而递归必须是左右两边最大值，
感觉无法在一个DFS里解决，所以将其分开进行并且进行了很多条件判断。
为什么没想到试试从下往上呢，感觉主要是计算最长路径的思路还是没有非常明确，最长路径也是以中间为交汇点，左右递归求最大深度的同时，计算在该交汇点的结果。
和该题基本一样，只是多了一个判断是否相等。最长路径也是首先dfs到最底层。
以后遇到类似的题目如果从上至下遍历次数过多，需要考虑是否可以从下至上，也是一个DP的思想

Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int longestUnivaluePath(TreeNode* root) {
        int res = 0;
        if (root) dfs(res, root);
        return res;
    }
    
    int dfs(int& res, TreeNode* node) {
        int left = node->left ? dfs(res, node->left) : 0;
        int right = node->right ? dfs(res, node->right) : 0;
        int leftRes = (node->left && node->left->val == node->val) ? left + 1 : 0;
        int rightRes = (node->right && node->right->val == node->val) ? right + 1 : 0;
        res = max(res, leftRes + rightRes);
        return max(leftRes, rightRes);
    }
    
};
