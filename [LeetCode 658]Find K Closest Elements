Description:
Given a sorted array, two integers k and x, find the k closest elements to x in the array. The result should also be sorted in ascending order. If there is a tie, the smaller elements are always preferred.

Example 1:
Input: [1,2,3,4,5], k=4, x=3
Output: [1,2,3,4]
Example 2:
Input: [1,2,3,4,5], k=4, x=-1
Output: [1,2,3,4]
Note:
The value k is positive and will always be smaller than the length of the sorted array.
Length of the given array is positive and will not exceed 104
Absolute value of elements in the array and x will not exceed 104

Solution:
二分查到离x距离最近的下标，然后从下标向两边扩展，左边的insert进res，右边的push进res。总时间复杂度O(logn + k)

Code:
class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        vector<int> res;
        int mid = findClosest(arr, 0, arr.size() - 1, x);
        int left = 0;
        int right = 1;
        int len = arr.size();
        while(res.size() < k) {
            while(res.size() < k && mid - left >= 0 && (mid + right >= len || abs(arr[mid - left] - x) <= abs(arr[mid + right] - x))) {
                res.insert(res.begin(), arr[mid - left]);
                left ++;
            }
            while(res.size() < k && mid + right < len && (mid - left < 0 || abs(arr[mid - left] - x) > abs(arr[mid + right] - x))) {
                res.push_back(arr[mid + right]);
                right ++;
            }
        }
        return res;
    }
    
    int findClosest(vector<int> arr, int left, int right, int k) {
        if (left >= right) return left;
        int mid = (left + right) / 2;
        if (arr[mid] > k) {
            return findClosest(arr, left, mid - 1, k);
        } else if(arr[mid] < k){
            return findClosest(arr, mid + 1, right, k);
        } else {
            return mid;
        }
    }
};
