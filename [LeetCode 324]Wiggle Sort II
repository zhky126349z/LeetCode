Description:
Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

Example:
(1) Given nums = [1, 5, 1, 1, 6, 4], one possible answer is [1, 4, 1, 5, 1, 6]. 
(2) Given nums = [1, 3, 2, 2, 3, 1], one possible answer is [2, 3, 1, 3, 1, 2].

Note:
You may assume all input has valid answer.

Follow Up:
Can you do it in O(n) time and/or in-place with O(1) extra space?

Credits:
Special thanks to @dietpepsi for adding this problem and creating all test cases.

Solution:
自己的算法就是排序，然后把数组分成两部分，结果的偶数位(从0开始算)从较小部分的最大数开始放入，结果的奇数位从较大部分的最大数开始放入。
如，[1,1,2,2,3,3,5]，小数部分[1,1,2,2]，大数部分[3,3,5]，偶数位[2,2,1,1]这样放，奇数位[5,3,3]，最后得到结果[2,5,2,3,1,3,1]。
sort时间复杂度O(nlog(n))，放入结果O(n)。

Code:
class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        int temp = 0;
        int step = 0;
        sort(nums.begin(), nums.end());
        vector<int> res;
        
        
        res.assign(nums.size(), 0);
        if (nums.size() % 2 == 0) {
            step = nums.size() / 2 - 1;
        } else {
            step = nums.size() / 2;
        }
        
        // cout<<step<<endl;
        // for (int i = 0; i < nums.size(); i ++) {
        
        //     cout<<nums[i]<<' ';
        // }
        // cout<<endl;
        
        for (int i = 0; i < nums.size(); i ++) {
            if (i % 2 == 0) {
                res[i] = nums[step - i / 2];
            } else {
                res[i] = nums[nums.size() - 1 - i / 2];
            }
        }
        
        nums = res;
        
    }
};
