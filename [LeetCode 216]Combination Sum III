Description:
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]

Solution:
一开始的想法是用一个数组位记录选择了哪几个数字，然后看是否满足结果，发现实现起来有点麻烦。
最后写的是backTracking，即回溯/DFS方法，就是不断试错回退，跟数独的思路差不多

Code:
class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> res;
        vector<int> path;
        backTracking(res, path, k, n);
        return res;
    }
    
    void backTracking(vector<vector<int>>& res, vector<int> path, int k, int n) {
        if (k == 0 && n == 0) {
            res.push_back(path);
            return;
        }
        
        for (int i = (path.size() == 0 ? 1 : (path[path.size() - 1] + 1)); i < 10 && i <= n; i ++) {
            path.push_back(i);
            backTracking(res, path, k - 1, n - i);
            path.pop_back();
        } 
        return;
    }
    
};
