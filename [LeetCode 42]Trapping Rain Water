Description:
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Solution:
优先队列，先把边界加入队列。每次选一个bar值最小的，对其未访问邻居进行访问，高度小depth则结果加depth，设访问标记，将邻居结点以较大高度压入队列。重复。

Code:
#include <queue>

class Solution {
public:
    int trap(vector<int>& height) {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> queue;
        vector<bool> visit(height.size(), false);
        int ans = 0;
        int left = 0, right = height.size() - 1;
        for (int i = 0; i < height.size(); i ++) {
            visit[i] = true;
            if (height[i] != 0) {
                queue.push(make_pair(height[i], i));
                left = i;
                break;
            }
        }
        for (int i = height.size() - 1; i >= 0; i --) {
            visit[i] = true;
            if (height[i] != 0) {
                queue.push(make_pair(height[i], i));
                right = i;
                break;
            }
        }
        
        vector<int> dir = {-1, 1};
        while(!queue.empty()) {
            pair<int, int> cur = queue.top();
            int hei = cur.first;
            int loc = cur.second;
            queue.pop();
            for (int i = 0; i < dir.size(); i ++) {
                if (loc + dir[i] > left && loc + dir[i] < right && visit[loc + dir[i]] == false) {
                    ans += max(hei - height[loc + dir[i]], 0);
                    visit[loc + dir[i]] = true;
                    queue.push(make_pair(max(hei, height[loc + dir[i]]), loc + dir[i]));
                }
            }
        }
        return ans;
    }
};
