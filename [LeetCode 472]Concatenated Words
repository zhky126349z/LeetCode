Description:
Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words.
A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

Example:
Input: ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]

Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]

Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
 "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
Note:
The number of elements of the given array will not exceed 10,000
The length sum of elements in the given array will not exceed 600,000.
All the input string will only include lower case letters.
The returned elements order does not matter.

Solution:
dp用来优化查找一个字符串是否能被比他短的字符串组成。
先将整个字符串数组排序，因为长的字符串肯定要用短的来组成。
然后对于每个string，判断其是否能被前面比他短的字符串组成。
dp[i]表示字符串word.substr(0, i)能否被组成
dp[i] = dp[j] & dic.find(word.substr(j, i - j)) != dic.end(); (0<=j<=i)
即我们要判断0-i能否被更短的字符串组成，只要判断是否有一段已经确定可以被组成，然后后一段是可以组成的。
总的时间复杂度应该是O(n^2*k^2)

Code:
class Solution {
public:
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        vector<string> res;
        set<string> dic;
        if (words.size() == 0) return res;
        sort(words.begin(), words.end(), cmp);
        
        for (int i = 0; i < words.size(); i ++) {
            string word = words[i];
            if (word.length() <= 1) {
                dic.insert(word);
                continue;
            }
            bool dp[word.length() + 1];
            memset(dp, false, sizeof(dp));
            dp[0] = true;
            
            for (int j = 1; j <= word.length(); j ++) {
                for (int k = 0; k < j; k ++) {
                    if (!dp[k]) continue;
                    if (dic.find(word.substr(k, j - k)) != dic.end()) {
                        dp[j] = true;
                        break;
                    }
                }
            }
            
            if (dp[word.length()] == true) res.push_back(word);
            dic.insert(word);
        }
        
        return res;
    }

private:
    static bool cmp(const string &a, const string &b) {
        if (a.length() < b.length()) return true;
        if (a.length() == b.length() && a < b) return true;
        return false;
    }
    
};
