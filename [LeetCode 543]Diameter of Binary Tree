Description:
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree 
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.

Solution:
求一个二叉树的最长结点间距离，左右最大深度相加即为以该节点为最顶点的路径的最大长度，不断递归，可以得到以所有结点为顶点的路径，取最大值。

Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        int res = 0;
        if (root == NULL) return res;
        maxDepth(&res, root);
        return res;
    }
    
    int maxDepth(int* res, TreeNode* node) {
        int left = 0;
        int right = 0;
        if (node->left != NULL) left = maxDepth(res, node->left);
        if (node->right != NULL) right = maxDepth(res, node->right);
        *res = max(*res, left + right);
        return max(left, right) + 1;
    }
};
