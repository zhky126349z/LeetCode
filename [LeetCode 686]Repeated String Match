Description:

Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, return -1.

For example, with A = "abcd" and B = "cdabcdab".

Return 3, because by repeating A three times (“abcdabcdabcd”), B is a substring of it; and B is not a substring of A repeated two times ("abcdabcd").

Note:
The length of A and B will be between 1 and 10000.

Solution:
收获，x.find() == string::npos

Code:
class Solution {
public:
    int repeatedStringMatch(string A, string B) {
        string temp = A;
        int ans = 1;
        while(temp.size() < B.size()) {
            temp = temp + A;
            ++ans;
        }
        if (temp.find(B) != string::npos) {
            return ans; 
        }
        temp = temp + A;
        if (temp.find(B) != string::npos) {
            return ans + 1;
        }
        return -1;
    }
};
